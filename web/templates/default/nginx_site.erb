server {
    listen   80;
    server_name  .<%= node[:app][:host] %>;
    access_log  <%= node[:nginx][:log_dir] %>/<%= node[:app][:host] %>.access.log;

    proxy_set_header Host $host;
    real_ip_header X-Forwarded-For;
    set_real_ip_from 10.0.0.0/8;

<% node[:nginx][:custom_block_ips].each do |ip| %>
    deny <%= ip %>;
<% end %>

    location /static/ {
        alias <%= "#{node[:app][:directory]}/#{node[:app][:host]}/#{node[:app][:name]}/static/" %>;
        autoindex off;
    }

    location / {
<% if node[:nginx][:basic_auth_entries].length > 0 %>
        auth_basic "<%= node[:nginx][:basic_auth_realm] %>";
        auth_basic_user_file <%= node[:nginx][:basic_auth_file] %>;
<% end %>
        # defining a new header in other locations result in resetting all previously defined headers.
        # so the Host header needs to be redefined here.
        # See https://gist.github.com/thoop/8165802#comment-1375035
        proxy_set_header Host $host;
        proxy_set_header X-Prerender-Token <%= node[:nginx][:prerender_token] %>;

        set $prerender 0;
        if ($http_user_agent ~* "baiduspider|twitterbot|facebookexternalhit|rogerbot|linkedinbot|embedly|quora link preview|showyoubot|outbrain|pinterest|slackbot|vkShare|W3C_Validator") {
            set $prerender 1;
        }
        if ($args ~ "_escaped_fragment_") {
            set $prerender 1;
        }
        if ($http_user_agent ~ "Prerender") {
            set $prerender 0;
        }
        if ($uri ~ "\.(js|css|xml|less|png|jpg|jpeg|gif|pdf|doc|txt|ico|rss|zip|mp3|rar|exe|wmv|doc|avi|ppt|mpg|mpeg|tif|wav|mov|psd|ai|xls|mp4|m4a|swf|dat|dmg|iso|flv|m4v|torrent|ttf|woff)") {
            set $prerender 0;
        }

        #resolve using Google's DNS server to force DNS resolution and prevent caching of IPs
        resolver 8.8.8.8;

        if ($prerender = 1) {
            #setting prerender as a variable forces DNS resolution since nginx caches IPs and doesnt play well with load balancing
            set $prerender "service.prerender.io";
            rewrite .* /$scheme://$host$request_uri? break;
            proxy_pass http://$prerender;
        }
        if ($prerender = 0) {
            proxy_pass http://127.0.0.1:8000;
        }
    }

    # Block all svn access
    if ($request_uri ~* ^.*\.svn.*$) {
        return 404;
    }

    # Block all git access
    if ($request_uri ~* ^.*\.git.*$) {
        return 404;
    }

    location /nginx_status {
        stub_status on;
        access_log off;
        allow 127.0.0.1;
        deny all;
    }
}

# block requests without valid domain.
server {
    listen 80 default_server;
    return 404;
}
